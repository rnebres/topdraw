{"version":3,"names":[],"mappings":"","sources":["bootstrap-filestyle.js"],"sourcesContent":["/*\n * bootstrap-filestyle\n * doc: http://markusslima.github.io/bootstrap-filestyle/\n * github: https://github.com/markusslima/bootstrap-filestyle\n *\n * Copyright (c) 2014 Markus Vinicius da Silva Lima\n * Version 1.2.1\n * Licensed under the MIT license.\n */\n(function($) {\"use strict\";\n\n    var nextId = 0;\n\n\tvar Filestyle = function(element, options) {\n\t\tthis.options = options;\n\t\tthis.$elementFilestyle = [];\n\t\tthis.$element = $(element);\n\t};\n\n\tFilestyle.prototype = {\n\t\tclear : function() {\n\t\t\tthis.$element.val('');\n\t\t\tthis.$elementFilestyle.find(':text').val('');\n\t\t\tthis.$elementFilestyle.find('.badge').remove();\n\t\t},\n\n\t\tdestroy : function() {\n\t\t\tthis.$element.removeAttr('style').removeData('filestyle');\n\t\t\tthis.$elementFilestyle.remove();\n\t\t},\n\n\t\tdisabled : function(value) {\n\t\t\tif (value === true) {\n\t\t\t\tif (!this.options.disabled) {\n\t\t\t\t\tthis.$element.attr('disabled', 'true');\n\t\t\t\t\tthis.$elementFilestyle.find('label').attr('disabled', 'true');\n\t\t\t\t\tthis.options.disabled = true;\n\t\t\t\t}\n\t\t\t} else if (value === false) {\n\t\t\t\tif (this.options.disabled) {\n\t\t\t\t\tthis.$element.removeAttr('disabled');\n\t\t\t\t\tthis.$elementFilestyle.find('label').removeAttr('disabled');\n\t\t\t\t\tthis.options.disabled = false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn this.options.disabled;\n\t\t\t}\n\t\t},\n\n\t\tbuttonBefore : function(value) {\n\t\t\tif (value === true) {\n\t\t\t\tif (!this.options.buttonBefore) {\n\t\t\t\t\tthis.options.buttonBefore = true;\n\t\t\t\t\tif (this.options.input) {\n\t\t\t\t\t\tthis.$elementFilestyle.remove();\n\t\t\t\t\t\tthis.constructor();\n\t\t\t\t\t\tthis.pushNameFiles();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (value === false) {\n\t\t\t\tif (this.options.buttonBefore) {\n\t\t\t\t\tthis.options.buttonBefore = false;\n\t\t\t\t\tif (this.options.input) {\n\t\t\t\t\t\tthis.$elementFilestyle.remove();\n\t\t\t\t\t\tthis.constructor();\n\t\t\t\t\t\tthis.pushNameFiles();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn this.options.buttonBefore;\n\t\t\t}\n\t\t},\n\n\t\ticon : function(value) {\n\t\t\tif (value === true) {\n\t\t\t\tif (!this.options.icon) {\n\t\t\t\t\tthis.options.icon = true;\n\t\t\t\t\tthis.$elementFilestyle.find('label').prepend(this.htmlIcon());\n\t\t\t\t}\n\t\t\t} else if (value === false) {\n\t\t\t\tif (this.options.icon) {\n\t\t\t\t\tthis.options.icon = false;\n\t\t\t\t\tthis.$elementFilestyle.find('.icon-span-filestyle').remove();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn this.options.icon;\n\t\t\t}\n\t\t},\n\n\t\tinput : function(value) {\n\t\t\tif (value === true) {\n\t\t\t\tif (!this.options.input) {\n\t\t\t\t\tthis.options.input = true;\n\n\t\t\t\t\tif (this.options.buttonBefore) {\n\t\t\t\t\t\tthis.$elementFilestyle.append(this.htmlInput());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.$elementFilestyle.prepend(this.htmlInput());\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.$elementFilestyle.find('.badge').remove();\n\n\t\t\t\t\tthis.pushNameFiles();\n\n\t\t\t\t\tthis.$elementFilestyle.find('.group-span-filestyle').addClass('input-group-btn');\n\t\t\t\t}\n\t\t\t} else if (value === false) {\n\t\t\t\tif (this.options.input) {\n\t\t\t\t\tthis.options.input = false;\n\t\t\t\t\tthis.$elementFilestyle.find(':text').remove();\n\t\t\t\t\tvar files = this.pushNameFiles();\n\t\t\t\t\tif (files.length > 0 && this.options.badge) {\n\t\t\t\t\t\tthis.$elementFilestyle.find('label').append(' <span class=\"badge\">' + files.length + '</span>');\n\t\t\t\t\t}\n\t\t\t\t\tthis.$elementFilestyle.find('.group-span-filestyle').removeClass('input-group-btn');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn this.options.input;\n\t\t\t}\n\t\t},\n\n\t\tsize : function(value) {\n\t\t\tif (value !== undefined) {\n\t\t\t\tvar btn = this.$elementFilestyle.find('label'), input = this.$elementFilestyle.find('input');\n\n\t\t\t\tbtn.removeClass('btn-lg btn-sm');\n\t\t\t\tinput.removeClass('input-lg input-sm');\n\t\t\t\tif (value != 'nr') {\n\t\t\t\t\tbtn.addClass('btn-' + value);\n\t\t\t\t\tinput.addClass('input-' + value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn this.options.size;\n\t\t\t}\n\t\t},\n\n\t\tplaceholder : function(value) {\n\t\t\tif (value !== undefined) {\n\t\t\t\tthis.options.placeholder = value;\n\t\t\t\tthis.$elementFilestyle.find('input').attr('placeholder', value);\n\t\t\t} else {\n\t\t\t\treturn this.options.placeholder;\n\t\t\t}\n\t\t},\n\n\t\tbuttonText : function(value) {\n\t\t\tif (value !== undefined) {\n\t\t\t\tthis.options.buttonText = value;\n\t\t\t\tthis.$elementFilestyle.find('label .buttonText').html(this.options.buttonText);\n\t\t\t} else {\n\t\t\t\treturn this.options.buttonText;\n\t\t\t}\n\t\t},\n\n\t\tbuttonTitle : function(value) {\n\t\t\tif (value !== undefined) {\n\t\t\t\tthis.options.buttonTitle = value;\n\t\t\t\tthis.$elementFilestyle.find('label .buttonTitle').html(this.options.buttonTitle);\n\t\t\t} else {\n\t\t\t\treturn this.options.buttonTitle;\n\t\t\t}\n\t\t},\n\n\t\tbuttonName : function(value) {\n\t\t\tif (value !== undefined) {\n\t\t\t\tthis.options.buttonName = value;\n\t\t\t\tthis.$elementFilestyle.find('label').attr({\n\t\t\t\t\t'class' : 'btn ' + this.options.buttonName\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn this.options.buttonName;\n\t\t\t}\n\t\t},\n\n\t\ticonName : function(value) {\n\t\t\tif (value !== undefined) {\n\t\t\t\tthis.$elementFilestyle.find('.icon-span-filestyle').attr({\n\t\t\t\t\t'class' : 'icon-span-filestyle ' + this.options.iconName\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn this.options.iconName;\n\t\t\t}\n\t\t},\n\n\t\thtmlIcon : function() {\n\t\t\tif (this.options.icon) {\n\t\t\t\treturn '<span class=\"icon-span-filestyle ' + this.options.iconName + '\"></span> ';\n\t\t\t} else {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t},\n\n\t\thtmlInput : function() {\n\t\t\tif (this.options.input) {\n\t\t\t\treturn '<input type=\"text\" class=\"form-control ' + (this.options.size == 'nr' ? '' : 'input-' + this.options.size) + '\" placeholder=\"'+ this.options.placeholder +'\" disabled> ';\n\t\t\t} else {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t},\n\n\t\t// puts the name of the input files\n\t\t// return files\n\t\tpushNameFiles : function() {\n\t\t\tvar content = '', files = [];\n\t\t\tif (this.$element[0].files === undefined) {\n\t\t\t\tfiles[0] = {\n\t\t\t\t\t'name' : this.$element[0] && this.$element[0].value\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tfiles = this.$element[0].files;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < files.length; i++) {\n\t\t\t\tcontent += files[i].name.split(\"\\\\\").pop() + ', ';\n\t\t\t}\n\n\t\t\tif (content !== '') {\n\t\t\t\tthis.$elementFilestyle.find(':text').val(content.replace(/\\, $/g, ''));\n\t\t\t} else {\n\t\t\t\tthis.$elementFilestyle.find(':text').val('');\n\t\t\t}\n\n\t\t\treturn files;\n\t\t},\n\n\t\tconstructor : function() {\n\t\t\tvar _self = this,\n\t\t\t\thtml = '',\n\t\t\t\tid = _self.$element.attr('id'),\n\t\t\t\tfiles = [],\n\t\t\t\tbtn = '',\n\t\t\t\t$label;\n\n\t\t\tif (id === '' || !id) {\n\t\t\t\tid = 'filestyle-' + nextId;\n\t\t\t\t_self.$element.attr({\n\t\t\t\t\t'id' : id\n\t\t\t\t});\n                nextId++;\n\t\t\t}\n\n\t\t\tbtn = '<span class=\"group-span-filestyle ' + (_self.options.input ? 'input-group-btn' : '') + '\">' +\n\t\t\t  '<label for=\"' + id + '\" class=\"btn ' + _self.options.buttonName + ' ' +\n\t\t\t  '\" title=\"' + _self.options.buttonTitle + ' ' +\n\t\t\t(_self.options.size == 'nr' ? '' : 'btn-' + _self.options.size) + '\" ' +\n\t\t\t(_self.options.disabled ? 'disabled=\"true\"' : '') + '>' +\n\t\t\t_self.htmlIcon() + '<span class=\"buttonText\">' + _self.options.buttonText + '</span>' +\n\t\t\t  '</label>' +\n\t\t\t  '</span>';\n\n\t\t\thtml = _self.options.buttonBefore ? btn + _self.htmlInput() : _self.htmlInput() + btn;\n\n\t\t\t_self.$elementFilestyle = $('<div class=\"bootstrap-filestyle input-group\">' + html + '</div>');\n\t\t\t_self.$elementFilestyle.find('.group-span-filestyle').attr('tabindex', \"0\").keypress(function(e) {\n\t\t\tif (e.keyCode === 13 || e.charCode === 32) {\n\t\t\t\t_self.$elementFilestyle.find('label').click();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// hidding input file and add filestyle\n\t\t\t_self.$element.css({\n\t\t\t\t'position' : 'absolute',\n\t\t\t\t'clip' : 'rect(0px 0px 0px 0px)' // using 0px for work in IE8\n\t\t\t}).attr('tabindex', \"-1\").after(_self.$elementFilestyle);\n\n\t\t\tif (_self.options.disabled) {\n\t\t\t\t_self.$element.attr('disabled', 'true');\n\t\t\t}\n\n\t\t\t// Getting input file value\n\t\t\t_self.$element.change(function() {\n\t\t\t\tvar files = _self.pushNameFiles();\n\n\t\t\t\tif (_self.options.input == false && _self.options.badge) {\n\t\t\t\t\tif (_self.$elementFilestyle.find('.badge').length == 0) {\n\t\t\t\t\t\t_self.$elementFilestyle.find('label').append(' <span class=\"badge\">' + files.length + '</span>');\n\t\t\t\t\t} else if (files.length == 0) {\n\t\t\t\t\t\t_self.$elementFilestyle.find('.badge').remove();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_self.$elementFilestyle.find('.badge').html(files.length);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_self.$elementFilestyle.find('.badge').remove();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Check if browser is Firefox\n\t\t\tif (window.navigator.userAgent.search(/firefox/i) > -1) {\n\t\t\t\t// Simulating choose file for firefox\n\t\t\t\t_self.$elementFilestyle.find('label').click(function() {\n\t\t\t\t\t_self.$element.click();\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\tvar old = $.fn.filestyle;\n\n\t$.fn.filestyle = function(option, value) {\n\t\tvar get = '', element = this.each(function() {\n\t\t\tif ($(this).attr('type') === 'file') {\n\t\t\t\tvar $this = $(this), data = $this.data('filestyle'), options = $.extend({}, $.fn.filestyle.defaults, option, typeof option === 'object' && option);\n\n\t\t\t\tif (!data) {\n\t\t\t\t\t$this.data('filestyle', ( data = new Filestyle(this, options)));\n\t\t\t\t\tdata.constructor();\n\t\t\t\t}\n\n\t\t\t\tif ( typeof option === 'string') {\n\t\t\t\t\tget = data[option](value);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif ( typeof get !== undefined) {\n\t\t\treturn get;\n\t\t} else {\n\t\t\treturn element;\n\t\t}\n\t};\n\n\t$.fn.filestyle.defaults = {\n\t\t'buttonText' : 'Choose file',\n\t\t'iconName' : 'glyphicon glyphicon-folder-open',\n\t\t'buttonName' : 'btn-default',\n\t\t'size' : 'nr',\n\t\t'input' : true,\n\t\t'badge' : true,\n\t\t'icon' : true,\n\t\t'buttonBefore' : false,\n\t\t'disabled' : false,\n\t\t'placeholder': ''\n\t};\n\n\t$.fn.filestyle.noConflict = function() {\n\t\t$.fn.filestyle = old;\n\t\treturn this;\n\t};\n\n\t$(function() {\n\t\t$('.filestyle').each(function() {\n\t\t\tvar $this = $(this), options = {\n\n\t\t\t\t'input' : $this.attr('data-input') === 'false' ? false : true,\n\t\t\t\t'icon' : $this.attr('data-icon') === 'false' ? false : true,\n\t\t\t\t'buttonBefore' : $this.attr('data-buttonBefore') === 'true' ? true : false,\n\t\t\t\t'disabled' : $this.attr('data-disabled') === 'true' ? true : false,\n\t\t\t\t'size' : $this.attr('data-size'),\n\t\t\t\t'buttonText' : $this.attr('data-buttonText'),\n\t\t\t\t'buttonTitle' : $this.attr('data-buttonTitle'),\n\t\t\t\t'buttonName' : $this.attr('data-buttonName'),\n\t\t\t\t'iconName' : $this.attr('data-iconName'),\n\t\t\t\t'badge' : $this.attr('data-badge') === 'false' ? false : true,\n\t\t\t\t'placeholder': $this.attr('data-placeholder')\n\t\t\t};\n\n\t\t\t$this.filestyle(options);\n\t\t});\n\t});\n})(window.jQuery);\n"],"file":"bootstrap-filestyle.js","sourceRoot":"/source/"}