{"version":3,"names":[],"mappings":"","sources":["jquery.multiselect.js"],"sourcesContent":["/**\r\n * Display a nice easy to use multiselect list\r\n * @Version: 2.0\r\n * @Author: Patrick Springstubbe\r\n * @Contact: @JediNobleclem\r\n * @Website: springstubbe.us\r\n * @Source: https://github.com/nobleclem/jQuery-MultiSelect\r\n * @Notes: If select list is hidden on page load use the jquery.actual plugin\r\n *         to resolve issues with preselected items placeholder text\r\n *         https://github.com/dreamerslab/jquery.actual\r\n *\r\n * Usage:\r\n *     $('select[multiple]').multiselect();\r\n *     $('select[multiple]').multiselect({ placeholder: 'Select options' });\r\n *     $('select[multiple]').multiselect('reload');\r\n *     $('select[multiple]').multiselect( 'loadOption', [{\r\n *         name   : 'Option Name 1',\r\n *         value  : 'option-value-1',\r\n *         checked: false\r\n *     },{\r\n *         name   : 'Option Name 2',\r\n *         value  : 'option-value-2',\r\n *         checked: false\r\n *     }]);\r\n *\r\n **/\r\n(function($){\r\n    var disabled = \"\";\r\n    var defaults = {\r\n        placeholder   : 'Select options', // text to use in dummy input\r\n        columns       : 1,                // how many columns should be use to show options\r\n        search        : false,            // include option search box\r\n        // search filter options\r\n        searchOptions : {\r\n            'default'    : 'Search',             // search input placeholder text\r\n            showOptGroups: false,                // show option group titles if no options remaining\r\n            onSearch     : function( element ){} // fires on keyup before search on options happens\r\n        },\r\n        selectAll     : false, // add select all option\r\n        selectGroup   : false, // select entire optgroup\r\n        minHeight     : 200,   // minimum height of option overlay\r\n        maxHeight     : null,  // maximum height of option overlay\r\n        showCheckbox  : true,  // display the checkbox to the user\r\n        jqActualOpts  : {},    // options for jquery.actual\r\n\r\n        // Callbacks\r\n        onLoad        : function( element ) {  // fires at end of list initialization\r\n            $(element).hide();\r\n        },\r\n        onOptionClick : function( element, option ){}, // fires when an option is clicked\r\n\r\n        // @NOTE: these are for future development\r\n        maxWidth      : null,  // maximum width of option overlay (or selector)\r\n        minSelect     : false, // minimum number of items that can be selected\r\n        maxSelect     : false, // maximum number of items that can be selected\r\n    };\r\n \r\n    var msCounter = 1;\r\n\r\n    function MultiSelect( element, options )\r\n    {\r\n        this.element = element;\r\n        this.options = $.extend( {}, defaults, options );\r\n        this.load();\r\n\r\n    }\r\n\r\n    MultiSelect.prototype = {\r\n        /* LOAD CUSTOM MULTISELECT DOM/ACTIONS */\r\n        load: function() {\r\n            var instance = this;\r\n\r\n            // make sure this is a select list and not loaded\r\n            if( (instance.element.nodeName != 'SELECT') || $(instance.element).hasClass('jqmsLoaded') ) {\r\n                return true;\r\n            }\r\n\r\n            // sanity check so we don't double load on a select element\r\n            $(instance.element).addClass('jqmsLoaded');\r\n\r\n            var attr = $(instance.element).attr('disabled');\r\n            disabled = typeof attr !== typeof undefined && attr!== false ?  attr : \"false\";\r\n\r\n            // add option container\r\n            if(disabled!=\"false\"){\r\n                  $(instance.element).after('<div class=\"ms-options-wrap\"><button disabled>None Selected</button><div class=\"ms-options\"><ul></ul></div></div>');\r\n            }else{\r\n                  $(instance.element).after('<div class=\"ms-options-wrap\"><button>None Selected</button><div class=\"ms-options\"><ul></ul></div></div>');\r\n            }\r\n          \r\n            var placeholder = $(instance.element).next('.ms-options-wrap').find('> button:first-child');\r\n            var optionsWrap = $(instance.element).next('.ms-options-wrap').find('> .ms-options');\r\n            var optionsList = optionsWrap.find('> ul');\r\n            var hasOptGroup = $(instance.element).find('optgroup').length ? true : false;\r\n\r\n\r\n            var maxWidth = null;\r\n            if( typeof instance.options.width == 'number' ) {\r\n                optionsWrap.parent().css( 'position', 'relative' );\r\n                maxWidth = instance.options.width;\r\n            }\r\n            else if( typeof instance.options.width == 'string' ) {\r\n                $( instance.options.width ).css( 'position', 'relative' );\r\n                maxWidth = '100%';\r\n            }\r\n            else {\r\n                optionsWrap.parent().css( 'position', 'relative' );\r\n            }\r\n\r\n            var maxHeight = ($(window).height() - optionsWrap.offset().top - 20);\r\n            if( instance.options.maxHeight ) {\r\n                maxHeight = ($(window).height() - optionsWrap.offset().top - 20);\r\n                maxHeight = maxHeight < instance.options.minHeight ? instance.options.minHeight : maxheight;\r\n            }\r\n\r\n            maxHeight = maxHeight < instance.options.minHeight ? instance.options.minHeight : maxHeight;\r\n\r\n            optionsWrap.css({\r\n                maxWidth : maxWidth,\r\n                minHeight: instance.options.minHeight,\r\n                maxHeight: maxHeight,\r\n                overflow : 'auto'\r\n            }).hide();\r\n\r\n            // isolate options scroll\r\n            // @source: https://github.com/nobleclem/jQuery-IsolatedScroll\r\n            optionsWrap.bind( 'touchmove mousewheel DOMMouseScroll', function ( e ) {\r\n                if( ($(this).outerHeight() < $(this)[0].scrollHeight) ) {\r\n                    var e0 = e.originalEvent,\r\n                        delta = e0.wheelDelta || -e0.detail;\r\n\r\n                    if( ($(this).outerHeight() + $(this)[0].scrollTop) > $(this)[0].scrollHeight ) {\r\n                        e.preventDefault();\r\n                        this.scrollTop += ( delta < 0 ? 1 : -1 );\r\n                    }\r\n                }\r\n            });\r\n\r\n            // hide options menus if click happens off of the list placeholder button\r\n            $(document).off('click.ms-hideopts').on('click.ms-hideopts', function( event ){\r\n                if( !$(event.target).closest('.ms-options-wrap').length ) {\r\n                    $('.ms-options-wrap > .ms-options:visible').hide();\r\n                }\r\n            });\r\n\r\n            // disable button action\r\n            placeholder.bind('mousedown',function( event ){\r\n                // ignore if its not a left click\r\n                if( event.which != 1 ) {\r\n                    return true;\r\n                }\r\n\r\n                // hide other menus before showing this one\r\n                $('.ms-options-wrap > .ms-options:visible').each(function(){\r\n                    if( $(this).parent().prev()[0] != optionsWrap.parent().prev()[0] ) {\r\n                        $(this).hide();\r\n                    }\r\n                });\r\n\r\n                // show/hide options\r\n                optionsWrap.toggle();\r\n\r\n                // recalculate height\r\n                if( optionsWrap.is(':visible') ) {\r\n                    optionsWrap.css( 'maxHeight', '' );\r\n\r\n                    var maxHeight = ($(window).height() - optionsWrap.offset().top - 20);\r\n                    if( instance.options.maxHeight ) {\r\n                        maxHeight = ($(window).height() - optionsWrap.offset().top - 20);\r\n                        maxHeight = maxHeight < instance.options.minHeight ? instance.options.minHeight : maxheight;\r\n                    }\r\n                    maxHeight = maxHeight < instance.options.minHeight ? instance.options.minHeight : maxHeight;\r\n\r\n                    optionsWrap.css( 'maxHeight', maxHeight );\r\n                }\r\n            }).click(function( event ){ event.preventDefault(); });\r\n\r\n            // add placeholder copy\r\n            if( instance.options.placeholder ) {\r\n                placeholder.text( instance.options.placeholder );\r\n            }\r\n\r\n            // add search box\r\n            if( instance.options.search ) {\r\n                optionsList.before('<div class=\"ms-search\"><input type=\"text\" value=\"\" placeholder=\"'+ instance.options.searchOptions['default'] +'\" /></div>');\r\n\r\n                var search = optionsWrap.find('.ms-search input');\r\n                search.on('keyup', function(){\r\n                    // ignore keystrokes that don't make a difference\r\n                    if( $(this).data('lastsearch') == $(this).val() ) {\r\n                        return true;\r\n                    }\r\n\r\n                    $(this).data('lastsearch', $(this).val() );\r\n\r\n                    // USER CALLBACK\r\n                    if( typeof instance.options.searchOptions.onSearch == 'function' ) {\r\n                        instance.options.searchOptions.onSearch( instance.element );\r\n                    }\r\n\r\n                    // search non optgroup li's\r\n                    optionsList.find('li:not(.optgroup)').each(function(){\r\n                        var optText = $(this).text();\r\n\r\n                        // show option if string exists\r\n                        if( optText.toLowerCase().indexOf( search.val().toLowerCase() ) > -1 ) {\r\n                            $(this).show();\r\n                        }\r\n                        // don't hide selected items\r\n                        else if( !$(this).hasClass('selected') ) {\r\n                            $(this).hide();\r\n                        }\r\n\r\n                        // hide / show optgroups depending on if options within it are visible\r\n                        if( !instance.options.searchOptions.showOptGroups && $(this).closest('li.optgroup') ) {\r\n                            $(this).closest('li.optgroup').show();\r\n\r\n                            if( $(this).closest('li.optgroup').find('li:visible').length ) {\r\n                                $(this).closest('li.optgroup').show();\r\n                            }\r\n                            else {\r\n                                $(this).closest('li.optgroup').hide();\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n\r\n            // add global select all options\r\n            if( instance.options.selectAll ) {\r\n                optionsList.before('<a href=\"#\" class=\"ms-selectall global\">Select all</a>');\r\n            }\r\n\r\n            // handle select all option\r\n            optionsWrap.on('click', '.ms-selectall', function( event ){\r\n                event.preventDefault();\r\n\r\n                if( $(this).hasClass('global') ) {\r\n                    // check if any selected if so then select them\r\n                    if( optionsList.find('li:not(.optgroup)').filter(':not(.selected)').length ) {\r\n                        optionsList.find('li:not(.optgroup)').filter(':not(.selected)').find('input[type=\"checkbox\"]').trigger('click');\r\n                    }\r\n                    // deselect everything\r\n                    else {\r\n                        optionsList.find('li:not(.optgroup).selected input[type=\"checkbox\"]').trigger('click');\r\n                    }\r\n                }\r\n                else if( $(this).closest('li').hasClass('optgroup') ) {\r\n                    var optgroup = $(this).closest('li.optgroup');\r\n\r\n                    // check if any selected if so then select them\r\n                    if( optgroup.find('li:not(.selected)').length ) {\r\n                        optgroup.find('li:not(.selected) input[type=\"checkbox\"]').trigger('click');\r\n                    }\r\n                    // deselect everything\r\n                    else {\r\n                        optgroup.find('li.selected input[type=\"checkbox\"]').trigger('click');\r\n                    }\r\n                }\r\n            });\r\n\r\n            // add options to wrapper\r\n            var options = [];\r\n            $(instance.element).children().each(function(){\r\n                if( this.nodeName == 'OPTGROUP' ) {\r\n                    var groupOptions = [];\r\n\r\n                    $(this).children('option').each(function(){\r\n                        groupOptions[ $(this).val() ] = {\r\n                            name   : $(this).text(),\r\n                            value  : $(this).val(),\r\n                            checked: $(this).prop( 'selected' )\r\n                        };\r\n                    });\r\n\r\n                    options.push({\r\n                        label  : $(this).attr('label'),\r\n                        options: groupOptions\r\n                    });\r\n                }\r\n                else if( this.nodeName == 'OPTION' ) {\r\n                    options.push({\r\n                        name   : $(this).text(),\r\n                        value  : $(this).val(),\r\n                        checked: $(this).prop( 'selected' )\r\n                    });\r\n                }\r\n                else {\r\n                    // bad option\r\n                    return true;\r\n                }\r\n            });\r\n            instance.loadOptions( options );\r\n\r\n            // COLUMNIZE\r\n            if( hasOptGroup ) {\r\n                // float non grouped options\r\n                optionsList.find('> li:not(.optgroup)').css({\r\n                    float: 'left',\r\n                    width: (100 / instance.options.columns) +'%'\r\n                });\r\n\r\n                // add CSS3 column styles\r\n                optionsList.find('li.optgroup').css({\r\n                    clear: 'both'\r\n                }).find('> ul').css({\r\n                    'column-count'        : instance.options.columns,\r\n                    'column-gap'          : 0,\r\n                    '-webkit-column-count': instance.options.columns,\r\n                    '-webkit-column-gap'  : 0,\r\n                    '-moz-column-count'   : instance.options.columns,\r\n                    '-moz-column-gap'     : 0\r\n                });\r\n\r\n                // for crappy IE versions float grouped options\r\n                if( this._ieVersion() && (this._ieVersion() < 10) ) {\r\n                    optionsList.find('li.optgroup > ul > li').css({\r\n                        float: 'left',\r\n                        width: (100 / instance.options.columns) +'%'\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                // add CSS3 column styles\r\n                optionsList.css({\r\n                    'column-count'        : instance.options.columns,\r\n                    'column-gap'          : 0,\r\n                    '-webkit-column-count': instance.options.columns,\r\n                    '-webkit-column-gap'  : 0,\r\n                    '-moz-column-count'   : instance.options.columns,\r\n                    '-moz-column-gap'     : 0\r\n                });\r\n\r\n                // for crappy IE versions float grouped options\r\n                if( this._ieVersion() && (this._ieVersion() < 10) ) {\r\n                    optionsList.find('> li').css({\r\n                        float: 'left',\r\n                        width: (100 / instance.options.columns) +'%'\r\n                    });\r\n                }\r\n            }\r\n\r\n            // BIND SELECT ACTION\r\n            optionsWrap.on( 'click', 'input[type=\"checkbox\"]', function(){\r\n                $(this).closest( 'li' ).toggleClass( 'selected' );\r\n\r\n                var select = optionsWrap.parent().prev();\r\n\r\n                // toggle clicked option\r\n                select.find('option[value=\"'+ $(this).val() +'\"]').prop(\r\n                    'selected', $(this).is(':checked')\r\n                ).closest('select').trigger('change');\r\n\r\n                if( typeof instance.options.onOptionClick == 'function' ) {\r\n                    instance.options.onOptionClick();\r\n                }\r\n\r\n                instance._updatePlaceholderText();\r\n            });\r\n\r\n            // hide native select list\r\n            if( typeof instance.options.onLoad === 'function' ) {\r\n                instance.options.onLoad( instance.element );\r\n            }\r\n            else {\r\n                $(instance.element).hide();\r\n            }\r\n        },\r\n\r\n        /* LOAD SELECT OPTIONS */\r\n        loadOptions: function( options, overwrite ) {\r\n            overwrite = (typeof overwrite == 'boolean') ? overwrite : true;\r\n\r\n            var instance    = this;\r\n            var optionsList = $(instance.element).next('.ms-options-wrap').find('> .ms-options > ul');\r\n\r\n            if( overwrite ) {\r\n                optionsList.find('> li').remove();\r\n            }\r\n\r\n            for( var key in options ) {\r\n                var thisOption = options[ key ];\r\n                var container  = $('<li></li>');\r\n\r\n                // optgroup\r\n                if( thisOption.hasOwnProperty('options') ) {\r\n                    container.addClass('optgroup');\r\n                    container.append('<span class=\"label\">'+ thisOption.label +'</span>');\r\n                    container.find('> .label').css({\r\n                        clear: 'both'\r\n                    });\r\n\r\n                    if( instance.options.selectGroup ) {\r\n                        container.append('<a href=\"#\" class=\"ms-selectall\">Select all</a>')\r\n                    }\r\n                    \r\n                    container.append('<ul></ul>');\r\n\r\n                    for( var gKey in thisOption.options ) {\r\n                        var thisGOption = thisOption.options[ gKey ];\r\n                        var gContainer  = $('<li></li>').addClass('ms-reflow');\r\n\r\n                        instance._addOption( gContainer, thisGOption );\r\n\r\n                        container.find('> ul').append( gContainer );\r\n                    }\r\n                }\r\n                // option\r\n                else if( thisOption.hasOwnProperty('value') ) {\r\n                    container.addClass('ms-reflow')\r\n\r\n                    instance._addOption( container, thisOption );\r\n                }\r\n\r\n                optionsList.append( container );\r\n            }\r\n\r\n            optionsList.find('.ms-reflow input[type=\"checkbox\"]').each(function( idx ){\r\n                if( $(this).css('display').match(/block$/) ) {\r\n                    var checkboxWidth = $(this).outerWidth();\r\n                        checkboxWidth = checkboxWidth ? checkboxWidth : 15;\r\n\r\n                    $(this).closest('label').css(\r\n                        'padding-left',\r\n                        (parseInt( $(this).closest('label').css('padding-left') ) * 2) + checkboxWidth\r\n                    );\r\n\r\n                    $(this).closest('.ms-reflow').removeClass('ms-reflow');\r\n                }\r\n            });\r\n\r\n            instance._updatePlaceholderText();\r\n        },\r\n\r\n        /* RESET THE DOM */\r\n        unload: function() {\r\n            $(this.element).next('.ms-options-wrap').remove();\r\n            $(this.element).show(function(){\r\n                $(this).css('display','').removeClass('jqmsLoaded');\r\n            });\r\n        },\r\n\r\n        /* RELOAD JQ MULTISELECT LIST */\r\n        reload: function() {\r\n            // remove existing options\r\n            $(this.element).next('.ms-options-wrap').remove();\r\n            $(this.element).removeClass('jqmsLoaded');\r\n\r\n            // load element\r\n            this.load();\r\n        },\r\n\r\n        /** PRIVATE FUNCTIONS **/\r\n        // update selected placeholder text\r\n        _updatePlaceholderText: function(){\r\n            var instance    = this;\r\n            var placeholder = $(instance.element).next('.ms-options-wrap').find('> button:first-child');\r\n            var optionsWrap = $(instance.element).next('.ms-options-wrap').find('> .ms-options');\r\n            var select      = optionsWrap.parent().prev();\r\n\r\n            // get selected options\r\n            var selOpts = [];\r\n            select.find('option:selected').each(function(){\r\n                selOpts.push( $(this).text() );\r\n            });\r\n\r\n            // UPDATE PLACEHOLDER TEXT WITH OPTIONS SELECTED\r\n            placeholder.text( selOpts.join( ', ' ) );\r\n            var copy = placeholder.clone().css({\r\n                display   : 'inline',\r\n                width     : 'auto',\r\n                visibility: 'hidden'\r\n            }).appendTo( optionsWrap.parent() );\r\n\r\n            // if the jquery.actual plugin is loaded use it to get the widths\r\n            var copyWidth  = (typeof $.fn.actual !== 'undefined') ? copy.actual( 'width', instance.options.jqActualOpts ) : copy.width();\r\n            var placeWidth = (typeof $.fn.actual !== 'undefined') ? placeholder.actual( 'width', instance.options.jqActualOpts ) : placeholder.width();\r\n\r\n            // if copy is larger than button width use \"# selected\"\r\n            if( copyWidth > placeWidth ) {\r\n                placeholder.text( selOpts.length +' selected' );\r\n            }\r\n            // if options selected then use those\r\n            else if( selOpts.length ) {\r\n                placeholder.text( selOpts.join( ', ' ) );\r\n            }\r\n            // replace placeholder text\r\n            else {\r\n                placeholder.text( instance.options.placeholder );\r\n            }\r\n\r\n            // remove dummy element\r\n            copy.remove();\r\n        },\r\n\r\n        // Add option to the custom dom list\r\n        _addOption: function( container, option ) {\r\n            container.text( option.name );\r\n            container.prepend(\r\n                $('<input type=\"checkbox\" value=\"\" title=\"\" />')\r\n                    .val( option.value )\r\n                    .attr( 'title', option.name )\r\n                    .attr( 'id', 'ms-opt-'+ msCounter )\r\n            );\r\n\r\n            if( option.checked ) {\r\n                container.addClass('default');\r\n                container.addClass('selected');\r\n                container.find( 'input[type=\"checkbox\"]' ).prop( 'checked', true );\r\n            }\r\n\r\n            var label = $('<label></label>').attr( 'for', 'ms-opt-'+ msCounter );\r\n            container.wrapInner( label );\r\n\r\n\r\n            if( !this.options.showCheckbox ) {\r\n                container.find('input[id=\"ms-opt-'+ msCounter +'\"]').hide();\r\n            }\r\n\r\n            msCounter = msCounter + 1;\r\n        },\r\n\r\n        // check ie version\r\n        _ieVersion: function() {\r\n            var myNav = navigator.userAgent.toLowerCase();\r\n            return (myNav.indexOf('msie') != -1) ? parseInt(myNav.split('msie')[1]) : false;\r\n        }\r\n    };\r\n\r\n    // ENABLE JQUERY PLUGIN FUNCTION\r\n    $.fn.multiselect = function( options ){\r\n        var args = arguments;\r\n        var ret;\r\n\r\n        // menuize each list\r\n        if( (options === undefined) || (typeof options === 'object') ) {\r\n            return this.each(function(){\r\n                if( !$.data( this, 'plugin_multiselect' ) ) {\r\n                    $.data( this, 'plugin_multiselect', new MultiSelect( this, options ) );\r\n                }\r\n            });\r\n        } else if( (typeof options === 'string') && (options[0] !== '_') && (options !== 'init') ) {\r\n            this.each(function(){\r\n                var instance = $.data( this, 'plugin_multiselect' );\r\n\r\n                if( instance instanceof MultiSelect && typeof instance[ options ] === 'function' ) {\r\n                    ret = instance[ options ].apply( instance, Array.prototype.slice.call( args, 1 ) );\r\n                }\r\n\r\n                // special destruct handler\r\n                if( options === 'unload' ) {\r\n                    $.data( this, 'plugin_multiselect', null );\r\n                }\r\n            });\r\n\r\n            return ret;\r\n        }\r\n\r\n\r\n    };\r\n}(jQuery));\r\n"],"file":"jquery.multiselect.js","sourceRoot":"/source/"}