{"version":3,"names":[],"mappings":"","sources":["jquery.multiselect.js"],"sourcesContent":["/**\n * Display a nice easy to use multiselect list\n * @Version: 2.0\n * @Author: Patrick Springstubbe\n * @Contact: @JediNobleclem\n * @Website: springstubbe.us\n * @Source: https://github.com/nobleclem/jQuery-MultiSelect\n * @Notes: If select list is hidden on page load use the jquery.actual plugin\n *         to resolve issues with preselected items placeholder text\n *         https://github.com/dreamerslab/jquery.actual\n *\n * Usage:\n *     $('select[multiple]').multiselect();\n *     $('select[multiple]').multiselect({ placeholder: 'Select options' });\n *     $('select[multiple]').multiselect('reload');\n *     $('select[multiple]').multiselect( 'loadOption', [{\n *         name   : 'Option Name 1',\n *         value  : 'option-value-1',\n *         checked: false\n *     },{\n *         name   : 'Option Name 2',\n *         value  : 'option-value-2',\n *         checked: false\n *     }]);\n *\n **/\n(function($){\n    var disabled = \"\";\n    var defaults = {\n        placeholder   : 'Select options', // text to use in dummy input\n        columns       : 1,                // how many columns should be use to show options\n        search        : false,            // include option search box\n        // search filter options\n        searchOptions : {\n            'default'    : 'Search',             // search input placeholder text\n            showOptGroups: false,                // show option group titles if no options remaining\n            onSearch     : function( element ){} // fires on keyup before search on options happens\n        },\n        selectAll     : false, // add select all option\n        selectGroup   : false, // select entire optgroup\n        minHeight     : 200,   // minimum height of option overlay\n        maxHeight     : null,  // maximum height of option overlay\n        showCheckbox  : true,  // display the checkbox to the user\n        jqActualOpts  : {},    // options for jquery.actual\n\n        // Callbacks\n        onLoad        : function( element ) {  // fires at end of list initialization\n            $(element).hide();\n        },\n        onOptionClick : function( element, option ){}, // fires when an option is clicked\n\n        // @NOTE: these are for future development\n        maxWidth      : null,  // maximum width of option overlay (or selector)\n        minSelect     : false, // minimum number of items that can be selected\n        maxSelect     : false, // maximum number of items that can be selected\n    };\n \n    var msCounter = 1;\n\n    function MultiSelect( element, options )\n    {\n        this.element = element;\n        this.options = $.extend( {}, defaults, options );\n        this.load();\n\n    }\n\n    MultiSelect.prototype = {\n        /* LOAD CUSTOM MULTISELECT DOM/ACTIONS */\n        load: function() {\n            var instance = this;\n\n            // make sure this is a select list and not loaded\n            if( (instance.element.nodeName != 'SELECT') || $(instance.element).hasClass('jqmsLoaded') ) {\n                return true;\n            }\n\n            // sanity check so we don't double load on a select element\n            $(instance.element).addClass('jqmsLoaded');\n\n            var attr = $(instance.element).attr('disabled');\n            disabled = typeof attr !== typeof undefined && attr!== false ?  attr : \"false\";\n\n            // add option container\n            if(disabled!=\"false\"){\n                  $(instance.element).after('<div class=\"ms-options-wrap\"><button disabled>None Selected</button><div class=\"ms-options\"><ul></ul></div></div>');\n            }else{\n                  $(instance.element).after('<div class=\"ms-options-wrap\"><button>None Selected</button><div class=\"ms-options\"><ul></ul></div></div>');\n            }\n          \n            var placeholder = $(instance.element).next('.ms-options-wrap').find('> button:first-child');\n            var optionsWrap = $(instance.element).next('.ms-options-wrap').find('> .ms-options');\n            var optionsList = optionsWrap.find('> ul');\n            var hasOptGroup = $(instance.element).find('optgroup').length ? true : false;\n\n\n            var maxWidth = null;\n            if( typeof instance.options.width == 'number' ) {\n                optionsWrap.parent().css( 'position', 'relative' );\n                maxWidth = instance.options.width;\n            }\n            else if( typeof instance.options.width == 'string' ) {\n                $( instance.options.width ).css( 'position', 'relative' );\n                maxWidth = '100%';\n            }\n            else {\n                optionsWrap.parent().css( 'position', 'relative' );\n            }\n\n            var maxHeight = ($(window).height() - optionsWrap.offset().top - 20);\n            if( instance.options.maxHeight ) {\n                maxHeight = ($(window).height() - optionsWrap.offset().top - 20);\n                maxHeight = maxHeight < instance.options.minHeight ? instance.options.minHeight : maxheight;\n            }\n\n            maxHeight = maxHeight < instance.options.minHeight ? instance.options.minHeight : maxHeight;\n\n            optionsWrap.css({\n                maxWidth : maxWidth,\n                minHeight: instance.options.minHeight,\n                maxHeight: maxHeight,\n                overflow : 'auto'\n            }).hide();\n\n            // isolate options scroll\n            // @source: https://github.com/nobleclem/jQuery-IsolatedScroll\n            optionsWrap.bind( 'touchmove mousewheel DOMMouseScroll', function ( e ) {\n                if( ($(this).outerHeight() < $(this)[0].scrollHeight) ) {\n                    var e0 = e.originalEvent,\n                        delta = e0.wheelDelta || -e0.detail;\n\n                    if( ($(this).outerHeight() + $(this)[0].scrollTop) > $(this)[0].scrollHeight ) {\n                        e.preventDefault();\n                        this.scrollTop += ( delta < 0 ? 1 : -1 );\n                    }\n                }\n            });\n\n            // hide options menus if click happens off of the list placeholder button\n            $(document).off('click.ms-hideopts').on('click.ms-hideopts', function( event ){\n                if( !$(event.target).closest('.ms-options-wrap').length ) {\n                    $('.ms-options-wrap > .ms-options:visible').hide();\n                }\n            });\n\n            // disable button action\n            placeholder.bind('mousedown',function( event ){\n                // ignore if its not a left click\n                if( event.which != 1 ) {\n                    return true;\n                }\n\n                // hide other menus before showing this one\n                $('.ms-options-wrap > .ms-options:visible').each(function(){\n                    if( $(this).parent().prev()[0] != optionsWrap.parent().prev()[0] ) {\n                        $(this).hide();\n                    }\n                });\n\n                // show/hide options\n                optionsWrap.toggle();\n\n                // recalculate height\n                if( optionsWrap.is(':visible') ) {\n                    optionsWrap.css( 'maxHeight', '' );\n\n                    var maxHeight = ($(window).height() - optionsWrap.offset().top - 20);\n                    if( instance.options.maxHeight ) {\n                        maxHeight = ($(window).height() - optionsWrap.offset().top - 20);\n                        maxHeight = maxHeight < instance.options.minHeight ? instance.options.minHeight : maxheight;\n                    }\n                    maxHeight = maxHeight < instance.options.minHeight ? instance.options.minHeight : maxHeight;\n\n                    optionsWrap.css( 'maxHeight', maxHeight );\n                }\n            }).click(function( event ){ event.preventDefault(); });\n\n            // add placeholder copy\n            if( instance.options.placeholder ) {\n                placeholder.text( instance.options.placeholder );\n            }\n\n            // add search box\n            if( instance.options.search ) {\n                optionsList.before('<div class=\"ms-search\"><input type=\"text\" value=\"\" placeholder=\"'+ instance.options.searchOptions['default'] +'\" /></div>');\n\n                var search = optionsWrap.find('.ms-search input');\n                search.on('keyup', function(){\n                    // ignore keystrokes that don't make a difference\n                    if( $(this).data('lastsearch') == $(this).val() ) {\n                        return true;\n                    }\n\n                    $(this).data('lastsearch', $(this).val() );\n\n                    // USER CALLBACK\n                    if( typeof instance.options.searchOptions.onSearch == 'function' ) {\n                        instance.options.searchOptions.onSearch( instance.element );\n                    }\n\n                    // search non optgroup li's\n                    optionsList.find('li:not(.optgroup)').each(function(){\n                        var optText = $(this).text();\n\n                        // show option if string exists\n                        if( optText.toLowerCase().indexOf( search.val().toLowerCase() ) > -1 ) {\n                            $(this).show();\n                        }\n                        // don't hide selected items\n                        else if( !$(this).hasClass('selected') ) {\n                            $(this).hide();\n                        }\n\n                        // hide / show optgroups depending on if options within it are visible\n                        if( !instance.options.searchOptions.showOptGroups && $(this).closest('li.optgroup') ) {\n                            $(this).closest('li.optgroup').show();\n\n                            if( $(this).closest('li.optgroup').find('li:visible').length ) {\n                                $(this).closest('li.optgroup').show();\n                            }\n                            else {\n                                $(this).closest('li.optgroup').hide();\n                            }\n                        }\n                    });\n                });\n            }\n\n            // add global select all options\n            if( instance.options.selectAll ) {\n                optionsList.before('<a href=\"#\" class=\"ms-selectall global\">Select all</a>');\n            }\n\n            // handle select all option\n            optionsWrap.on('click', '.ms-selectall', function( event ){\n                event.preventDefault();\n\n                if( $(this).hasClass('global') ) {\n                    // check if any selected if so then select them\n                    if( optionsList.find('li:not(.optgroup)').filter(':not(.selected)').length ) {\n                        optionsList.find('li:not(.optgroup)').filter(':not(.selected)').find('input[type=\"checkbox\"]').trigger('click');\n                    }\n                    // deselect everything\n                    else {\n                        optionsList.find('li:not(.optgroup).selected input[type=\"checkbox\"]').trigger('click');\n                    }\n                }\n                else if( $(this).closest('li').hasClass('optgroup') ) {\n                    var optgroup = $(this).closest('li.optgroup');\n\n                    // check if any selected if so then select them\n                    if( optgroup.find('li:not(.selected)').length ) {\n                        optgroup.find('li:not(.selected) input[type=\"checkbox\"]').trigger('click');\n                    }\n                    // deselect everything\n                    else {\n                        optgroup.find('li.selected input[type=\"checkbox\"]').trigger('click');\n                    }\n                }\n            });\n\n            // add options to wrapper\n            var options = [];\n            $(instance.element).children().each(function(){\n                if( this.nodeName == 'OPTGROUP' ) {\n                    var groupOptions = [];\n\n                    $(this).children('option').each(function(){\n                        groupOptions[ $(this).val() ] = {\n                            name   : $(this).text(),\n                            value  : $(this).val(),\n                            checked: $(this).prop( 'selected' )\n                        };\n                    });\n\n                    options.push({\n                        label  : $(this).attr('label'),\n                        options: groupOptions\n                    });\n                }\n                else if( this.nodeName == 'OPTION' ) {\n                    options.push({\n                        name   : $(this).text(),\n                        value  : $(this).val(),\n                        checked: $(this).prop( 'selected' )\n                    });\n                }\n                else {\n                    // bad option\n                    return true;\n                }\n            });\n            instance.loadOptions( options );\n\n            // COLUMNIZE\n            if( hasOptGroup ) {\n                // float non grouped options\n                optionsList.find('> li:not(.optgroup)').css({\n                    float: 'left',\n                    width: (100 / instance.options.columns) +'%'\n                });\n\n                // add CSS3 column styles\n                optionsList.find('li.optgroup').css({\n                    clear: 'both'\n                }).find('> ul').css({\n                    'column-count'        : instance.options.columns,\n                    'column-gap'          : 0,\n                    '-webkit-column-count': instance.options.columns,\n                    '-webkit-column-gap'  : 0,\n                    '-moz-column-count'   : instance.options.columns,\n                    '-moz-column-gap'     : 0\n                });\n\n                // for crappy IE versions float grouped options\n                if( this._ieVersion() && (this._ieVersion() < 10) ) {\n                    optionsList.find('li.optgroup > ul > li').css({\n                        float: 'left',\n                        width: (100 / instance.options.columns) +'%'\n                    });\n                }\n            }\n            else {\n                // add CSS3 column styles\n                optionsList.css({\n                    'column-count'        : instance.options.columns,\n                    'column-gap'          : 0,\n                    '-webkit-column-count': instance.options.columns,\n                    '-webkit-column-gap'  : 0,\n                    '-moz-column-count'   : instance.options.columns,\n                    '-moz-column-gap'     : 0\n                });\n\n                // for crappy IE versions float grouped options\n                if( this._ieVersion() && (this._ieVersion() < 10) ) {\n                    optionsList.find('> li').css({\n                        float: 'left',\n                        width: (100 / instance.options.columns) +'%'\n                    });\n                }\n            }\n\n            // BIND SELECT ACTION\n            optionsWrap.on( 'click', 'input[type=\"checkbox\"]', function(){\n                $(this).closest( 'li' ).toggleClass( 'selected' );\n\n                var select = optionsWrap.parent().prev();\n\n                // toggle clicked option\n                select.find('option[value=\"'+ $(this).val() +'\"]').prop(\n                    'selected', $(this).is(':checked')\n                ).closest('select').trigger('change');\n\n                if( typeof instance.options.onOptionClick == 'function' ) {\n                    instance.options.onOptionClick();\n                }\n\n                instance._updatePlaceholderText();\n            });\n\n            // hide native select list\n            if( typeof instance.options.onLoad === 'function' ) {\n                instance.options.onLoad( instance.element );\n            }\n            else {\n                $(instance.element).hide();\n            }\n        },\n\n        /* LOAD SELECT OPTIONS */\n        loadOptions: function( options, overwrite ) {\n            overwrite = (typeof overwrite == 'boolean') ? overwrite : true;\n\n            var instance    = this;\n            var optionsList = $(instance.element).next('.ms-options-wrap').find('> .ms-options > ul');\n\n            if( overwrite ) {\n                optionsList.find('> li').remove();\n            }\n\n            for( var key in options ) {\n                var thisOption = options[ key ];\n                var container  = $('<li></li>');\n\n                // optgroup\n                if( thisOption.hasOwnProperty('options') ) {\n                    container.addClass('optgroup');\n                    container.append('<span class=\"label\">'+ thisOption.label +'</span>');\n                    container.find('> .label').css({\n                        clear: 'both'\n                    });\n\n                    if( instance.options.selectGroup ) {\n                        container.append('<a href=\"#\" class=\"ms-selectall\">Select all</a>')\n                    }\n                    \n                    container.append('<ul></ul>');\n\n                    for( var gKey in thisOption.options ) {\n                        var thisGOption = thisOption.options[ gKey ];\n                        var gContainer  = $('<li></li>').addClass('ms-reflow');\n\n                        instance._addOption( gContainer, thisGOption );\n\n                        container.find('> ul').append( gContainer );\n                    }\n                }\n                // option\n                else if( thisOption.hasOwnProperty('value') ) {\n                    container.addClass('ms-reflow')\n\n                    instance._addOption( container, thisOption );\n                }\n\n                optionsList.append( container );\n            }\n\n            optionsList.find('.ms-reflow input[type=\"checkbox\"]').each(function( idx ){\n                if( $(this).css('display').match(/block$/) ) {\n                    var checkboxWidth = $(this).outerWidth();\n                        checkboxWidth = checkboxWidth ? checkboxWidth : 15;\n\n                    $(this).closest('label').css(\n                        'padding-left',\n                        (parseInt( $(this).closest('label').css('padding-left') ) * 2) + checkboxWidth\n                    );\n\n                    $(this).closest('.ms-reflow').removeClass('ms-reflow');\n                }\n            });\n\n            instance._updatePlaceholderText();\n        },\n\n        /* RESET THE DOM */\n        unload: function() {\n            $(this.element).next('.ms-options-wrap').remove();\n            $(this.element).show(function(){\n                $(this).css('display','').removeClass('jqmsLoaded');\n            });\n        },\n\n        /* RELOAD JQ MULTISELECT LIST */\n        reload: function() {\n            // remove existing options\n            $(this.element).next('.ms-options-wrap').remove();\n            $(this.element).removeClass('jqmsLoaded');\n\n            // load element\n            this.load();\n        },\n\n        /** PRIVATE FUNCTIONS **/\n        // update selected placeholder text\n        _updatePlaceholderText: function(){\n            var instance    = this;\n            var placeholder = $(instance.element).next('.ms-options-wrap').find('> button:first-child');\n            var optionsWrap = $(instance.element).next('.ms-options-wrap').find('> .ms-options');\n            var select      = optionsWrap.parent().prev();\n\n            // get selected options\n            var selOpts = [];\n            select.find('option:selected').each(function(){\n                selOpts.push( $(this).text() );\n            });\n\n            // UPDATE PLACEHOLDER TEXT WITH OPTIONS SELECTED\n            placeholder.text( selOpts.join( ', ' ) );\n            var copy = placeholder.clone().css({\n                display   : 'inline',\n                width     : 'auto',\n                visibility: 'hidden'\n            }).appendTo( optionsWrap.parent() );\n\n            // if the jquery.actual plugin is loaded use it to get the widths\n            var copyWidth  = (typeof $.fn.actual !== 'undefined') ? copy.actual( 'width', instance.options.jqActualOpts ) : copy.width();\n            var placeWidth = (typeof $.fn.actual !== 'undefined') ? placeholder.actual( 'width', instance.options.jqActualOpts ) : placeholder.width();\n\n            // if copy is larger than button width use \"# selected\"\n            if( copyWidth > placeWidth ) {\n                placeholder.text( selOpts.length +' selected' );\n            }\n            // if options selected then use those\n            else if( selOpts.length ) {\n                placeholder.text( selOpts.join( ', ' ) );\n            }\n            // replace placeholder text\n            else {\n                placeholder.text( instance.options.placeholder );\n            }\n\n            // remove dummy element\n            copy.remove();\n        },\n\n        // Add option to the custom dom list\n        _addOption: function( container, option ) {\n            container.text( option.name );\n            container.prepend(\n                $('<input type=\"checkbox\" value=\"\" title=\"\" />')\n                    .val( option.value )\n                    .attr( 'title', option.name )\n                    .attr( 'id', 'ms-opt-'+ msCounter )\n            );\n\n            if( option.checked ) {\n                container.addClass('default');\n                container.addClass('selected');\n                container.find( 'input[type=\"checkbox\"]' ).prop( 'checked', true );\n            }\n\n            var label = $('<label></label>').attr( 'for', 'ms-opt-'+ msCounter );\n            container.wrapInner( label );\n\n\n            if( !this.options.showCheckbox ) {\n                container.find('input[id=\"ms-opt-'+ msCounter +'\"]').hide();\n            }\n\n            msCounter = msCounter + 1;\n        },\n\n        // check ie version\n        _ieVersion: function() {\n            var myNav = navigator.userAgent.toLowerCase();\n            return (myNav.indexOf('msie') != -1) ? parseInt(myNav.split('msie')[1]) : false;\n        }\n    };\n\n    // ENABLE JQUERY PLUGIN FUNCTION\n    $.fn.multiselect = function( options ){\n        var args = arguments;\n        var ret;\n\n        // menuize each list\n        if( (options === undefined) || (typeof options === 'object') ) {\n            return this.each(function(){\n                if( !$.data( this, 'plugin_multiselect' ) ) {\n                    $.data( this, 'plugin_multiselect', new MultiSelect( this, options ) );\n                }\n            });\n        } else if( (typeof options === 'string') && (options[0] !== '_') && (options !== 'init') ) {\n            this.each(function(){\n                var instance = $.data( this, 'plugin_multiselect' );\n\n                if( instance instanceof MultiSelect && typeof instance[ options ] === 'function' ) {\n                    ret = instance[ options ].apply( instance, Array.prototype.slice.call( args, 1 ) );\n                }\n\n                // special destruct handler\n                if( options === 'unload' ) {\n                    $.data( this, 'plugin_multiselect', null );\n                }\n            });\n\n            return ret;\n        }\n\n\n    };\n}(jQuery));\n"],"file":"jquery.multiselect.js","sourceRoot":"/source/"}